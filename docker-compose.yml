# You can uncomment and configure these for Docker Swarm if needed
# networks:
#   kafka_overlay_net:
#     driver: overlay
#     attachable: true

volumes:
  kafka-data-controller-0:
    driver: local
  kafka-data-broker-0:
    driver: local
  kafka-connect-data:
    driver: local

services:
  kafka-controller-0:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka-controller-0
    container_name: kafka-controller-0
    # networks:
    #   - kafka_overlay_net
    ports:
      - '9093:9093'
    environment:
      CLUSTER_ID: Rv_mOiSXQMSkcOpL_jZ01Q
      KAFKA_PROCESS_ROLES: controller
      KAFKA_NODE_ID: 1001
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1001@kafka-controller-0:9093
      KAFKA_LISTENERS: CONTROLLER://kafka-controller-0:9093

      KAFKA_AUTHORIZER_CLASS_NAME: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
      KAFKA_SUPER_USERS: "User:${file:/etc/kafka/secrets/admin-credentials.properties:admin.username};User:CN=kafka-controller-0,OU=Confluent,O=TestOrg,L=MountainView,ST=CA,C=US;User:CN=kafka-broker-0,OU=Confluent,O=TestOrg,L=MountainView,ST=CA,C=US"

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https

      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-controller-0-keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:kafka.keystore.password}"
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-controller-0-truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:kafka.truststore.password}"

      KAFKA_LOG_DIRS: /var/lib/kafka/data/controller-data

      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data-controller-0:/var/lib/kafka/data
      
      - ./certs/kafka-controller-0-keystore.jks:/etc/kafka/secrets/kafka-controller-0-keystore.jks:ro
      - ./certs/kafka-controller-0-truststore.jks:/etc/kafka/secrets/kafka-controller-0-truststore.jks:ro
      - ./certs/client-truststore.jks:/etc/kafka/secrets/client-truststore.jks:ro 
      
      - ./configs/kraft-controller.properties:/etc/kafka/kraft-server.properties
      - ./configs/kafka-configs-cli.properties:/etc/kafka/kafka-configs-cli.properties:ro
      - ./configs/kafka-acls-admin-cli.properties:/etc/kafka/kafka-acls-admin-cli.properties

      - ./secrets:/etc/kafka/secrets:ro
    deploy:
      # mode: replicated
      # replicas: 1
      # placement:
      #   constraints:
      #     - node.role == worker
      restart_policy:
        condition: on-failure

  kafka-broker-0:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka-broker-0
    container_name: kafka-broker-0
    depends_on: 
      - kafka-controller-0
    # networks:
    #   - kafka_overlay_net
    ports:
      - '9092:9092' 
    environment:
      CLUSTER_ID: Rv_mOiSXQMSkcOpL_jZ01Q
      KAFKA_PROCESS_ROLES: broker
      KAFKA_NODE_ID: 2001
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1001@kafka-controller-0:9093
      KAFKA_LISTENERS: CLIENT://0.0.0.0:9092,BROKER://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka-broker-0:9092,BROKER://kafka-broker-0:9091,CONTROLLER://kafka-controller-0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:SASL_SSL,BROKER:SSL,CONTROLLER:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER 

      KAFKA_LISTENER_NAME_CLIENT_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https

      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-broker-0-keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:kafka.keystore.password}"
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-broker-0-truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:kafka.truststore.password}"

      KAFKA_LISTENER_NAME_BROKER_SSL_CLIENT_AUTH: required
      KAFKA_LISTENER_NAME_CONTROLLER_SSL_CLIENT_AUTH: required 

      KAFKA_AUTHORIZER_CLASS_NAME: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
      KAFKA_SUPER_USERS: "User:${file:/etc/kafka/secrets/admin-credentials.properties:admin.username};User:CN=kafka-controller-0,OU=Confluent,O=TestOrg,L=MountainView,ST=CA,C=US;User:CN=kafka-broker-0,OU=Confluent,O=TestOrg,L=MountainView,ST=CA,C=US"
      
      KAFKA_LOG_DIRS: /var/lib/kafka/data/broker-data
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_LISTENER_NAME_CLIENT_SCRAM_SHA_512_JAAS_CONFIG: |
        org.apache.kafka.common.security.scram.ScramLoginModule required;

      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data-broker-0:/var/lib/kafka/data

      - ./certs/kafka-broker-0-keystore.jks:/etc/kafka/secrets/kafka-broker-0-keystore.jks:ro
      - ./certs/kafka-broker-0-truststore.jks:/etc/kafka/secrets/kafka-broker-0-truststore.jks:ro

      - ./configs/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf:ro
      - ./configs/kafka-acls-admin-cli.properties:/etc/kafka/kafka-acls-admin-cli.properties:ro

      - ./secrets:/etc/kafka/secrets:ro
    deploy:
      # mode: replicated
      # replicas: 1
      # placement:
      #   constraints:
      #     - node.role == worker
      restart_policy:
        condition: on-failure

  kafka-connect:
     image: confluentinc/cp-kafka-connect:7.9.0
     hostname: kafka-connect
     container_name: kafka-connect
     depends_on: 
      - kafka-broker-0
     ports:
       - '8083:8083' 
     environment:
       # Kafka Broker Communication (SASL_SSL)
       CONNECT_BOOTSTRAP_SERVERS: kafka-broker-0:9092
       CONNECT_GROUP_ID: Rv_mOiSXQMSkcOpL_jZ01Q
       CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
       CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
       CONNECT_STATUS_STORAGE_TOPIC: connect-status
       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
       CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
       CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
       CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
       KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka-connect-jaas.conf"

       CONNECT_SECURITY_PROTOCOL: SASL_SSL
       CONNECT_SASL_MECHANISM: SCRAM-SHA-512
       CONNECT_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client-truststore.jks
       CONNECT_SSL_TRUSTSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:connect.truststore.password}"
       CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https

       # Consumer configurations (for internal topics and source connectors)
       CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
       CONNECT_CONSUMER_SASL_MECHANISM: SCRAM-SHA-512
       CONNECT_CONSUMER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client-truststore.jks
       CONNECT_CONSUMER_SSL_TRUSTSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:connect.truststore.password}"
       CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https

       # Producer configurations (for internal topics and sink connectors)
       CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
       CONNECT_PRODUCER_SASL_MECHANISM: SCRAM-SHA-512
       CONNECT_PRODUCER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client-truststore.jks
       CONNECT_PRODUCER_SSL_TRUSTSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:connect.truststore.password}"
       CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https

       # Internal Kafka Connect Topic Replication Factors (set to 1 for a single broker)
       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

       # Kafka Connect REST API Security (SASL/SCRAM over SSL)
       CONNECT_REST_LISTENERS: https://0.0.0.0:8083,https://localhost:8083,https://kafka-connect:8083      
       CONNECT_REST_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https 
       CONNECT_REST_AUTHENTICATION_METHOD: SASL_SCRAM # Use SASL/SCRAM for authentication
       CONNECT_REST_AUTHENTICATION_REALM: KafkaConnectRest # A realm name
       CONNECT_REST_AUTHENTICATION_SASL_MECHANISM: SCRAM-SHA-512 # SCRAM-SHA-512 mechanism
       CONNECT_REST_SASL_JAAS_CONFIG: | # JAAS configuration for the REST API's authentication
         org.apache.kafka.common.security.scram.ScramLoginModule required
         username="${file:/etc/kafka/secrets/connect-credentials.properties:rest.username}"
         password="${file:/etc/kafka/secrets/connect-credentials.properties:rest.password}";

       # SSL/TLS configuration for the REST API (server-side encryption)
       CONNECT_REST_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-connect-rest-keystore.jks # Path to Connect REST server's keystore
       CONNECT_REST_SSL_KEYSTORE_PASSWORD: "${file:/etc/kafka/secrets/ssl-passwords.properties:connect.rest.keystore.password}"

     volumes:
       - kafka-connect-data:/var/lib/kafka/connect-data

       - ./certs/client-truststore.jks:/etc/kafka/secrets/client-truststore.jks:ro # Truststore for communicating with brokers
       - ./certs/kafka-connect-rest-keystore.jks:/etc/kafka/secrets/kafka-connect-rest-keystore.jks:ro # Keystore for REST server SSL

       - ./configs/kafka-connect-jaas.conf:/etc/kafka/kafka-connect-jaas.conf:ro # JAAS for broker authentication

       - ./secrets/connect-credentials.properties:/etc/kafka/secrets/connect-credentials.properties:ro # Credentials for Connect REST API
       - ./secrets/ssl-passwords.properties:/etc/kafka/secrets/ssl-passwords.properties:ro # Passwords for SSL keystores/truststores relevant to connect
     deploy:
       # mode: replicated
       # replicas: 1
       # placement:
       #   constraints:
       #     - node.role == worker
       #     - node.hostname == <hostname_of_node_for_connect> # <<< REPLACE THIS
       restart_policy:
         condition: on-failure
     # depends_on:
     #   kafka-broker-0:
     #     condition: service_healthy